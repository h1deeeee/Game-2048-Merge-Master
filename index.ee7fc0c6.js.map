{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nvar Game = /*#__PURE__*/ function() {\n    function Game() {\n        _class_call_check(this, Game);\n        this.grid = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.score = 0;\n        this.updateScore();\n        this.addNumber();\n        this.addNumber();\n    }\n    _create_class(Game, [\n        {\n            key: \"addNumber\",\n            value: function addNumber() {\n                var randomPosition;\n                var positionNumberArr;\n                var newNumber;\n                var emptyCells = 0;\n                var lastCell = [];\n                for(var i = 0; i < this.grid.length; i++){\n                    for(var j = 0; j < this.grid[i].length; j++)if (this.grid[i][j] === 0) {\n                        emptyCells++;\n                        lastCell[0] = [\n                            i,\n                            j\n                        ];\n                    }\n                }\n                if (emptyCells > 1) {\n                    do {\n                        randomPosition = getRandomPosition();\n                        positionNumberArr = Math.floor(randomPosition / 4);\n                        newNumber = getRandomNumber();\n                    }while (this.grid[positionNumberArr][randomPosition % 4] !== 0);\n                    this.grid[positionNumberArr][randomPosition % 4] = newNumber;\n                    this.updateGrid();\n                }\n                if (emptyCells === 1) {\n                    this.grid[lastCell[0][0]][lastCell[0][1]] = getRandomNumber();\n                    this.updateGrid();\n                } else this.checkGameStatus();\n            }\n        },\n        {\n            key: \"copyGrid\",\n            value: function copyGrid() {\n                return this.grid.map(function(row) {\n                    return row.slice();\n                });\n            }\n        },\n        {\n            key: \"isGridEqual\",\n            value: function isGridEqual(grid1, grid2) {\n                for(var i = 0; i < grid1.length; i++)for(var j = 0; j < grid1[i].length; j++){\n                    if (grid1[i][j] !== grid2[i][j]) return false;\n                }\n                return true;\n            }\n        },\n        {\n            key: \"action\",\n            value: function action(direction) {\n                var originalGrid = this.copyGrid();\n                this.move(direction);\n                this.mergeNumber(direction);\n                var gridChanged = !this.isGridEqual(originalGrid, this.grid);\n                this.updateScore();\n                this.move(direction);\n                if (gridChanged) this.addNumber();\n                this.checkGameStatus();\n            }\n        },\n        {\n            key: \"move\",\n            value: function move(direction) {\n                switch(true){\n                    case direction === \"up\":\n                        this.moveUp();\n                        break;\n                    case direction === \"down\":\n                        this.moveDown();\n                        break;\n                    case direction === \"left\":\n                        this.moveLeft();\n                        break;\n                    case direction === \"right\":\n                        this.moveRight();\n                        break;\n                }\n            }\n        },\n        {\n            key: \"mergeNumber\",\n            value: function mergeNumber(direction) {\n                switch(true){\n                    case direction === \"up\":\n                        this.mergeUp();\n                        break;\n                    case direction === \"down\":\n                        this.mergeDown();\n                        break;\n                    case direction === \"left\":\n                        this.mergeLeft();\n                        break;\n                    case direction === \"right\":\n                        this.mergeRight();\n                        break;\n                }\n            }\n        },\n        {\n            key: \"updateGrid\",\n            value: function updateGrid() {\n                for(var i = 0; i < this.grid.length; i++)for(var j = 0; j < this.grid[i].length; j++){\n                    var cellValue = this.grid[i][j];\n                    var cellId = \"field-cell-\".concat(i * 4 + j);\n                    var cellElement = document.getElementById(cellId);\n                    cellElement.className = \"field-cell\";\n                    if (cellValue !== 0) {\n                        cellElement.classList.add(\"field-cell--\".concat(cellValue));\n                        cellElement.innerText = cellValue;\n                    } else cellElement.innerText = \"\";\n                }\n            }\n        },\n        {\n            key: \"updateScore\",\n            value: function updateScore() {\n                var element = document.getElementById(\"game-score\");\n                element.innerText = this.score;\n            }\n        },\n        {\n            key: \"mergeRight\",\n            value: function mergeRight() {\n                for(var i = 0; i < this.grid.length; i++){\n                    for(var j = this.grid[i].length - 1; j >= 0; j--)if (this.grid[i][j] !== 0) {\n                        var currentCell = this.grid[i][j];\n                        var nextCell = this.grid[i][j - 1];\n                        if (currentCell === nextCell) {\n                            this.grid[i][j] *= 2;\n                            this.grid[i][j - 1] = 0;\n                            this.score += this.grid[i][j];\n                        }\n                    }\n                }\n                this.updateGrid();\n            }\n        },\n        {\n            key: \"mergeLeft\",\n            value: function mergeLeft() {\n                for(var i = 0; i < this.grid.length; i++){\n                    for(var j = 0; j <= this.grid[i].length - 1; j++)if (this.grid[i][j] !== 0) {\n                        var currentCell = this.grid[i][j];\n                        var nextCell = this.grid[i][j + 1];\n                        if (currentCell === nextCell) {\n                            this.grid[i][j] *= 2;\n                            this.grid[i][j + 1] = 0;\n                            this.score += this.grid[i][j];\n                        }\n                    }\n                }\n                this.updateGrid();\n            }\n        },\n        {\n            key: \"mergeDown\",\n            value: function mergeDown() {\n                for(var i = this.grid.length - 1; i >= 1; i--){\n                    for(var j = 0; j < this.grid[i].length; j++)if (this.grid[i][j] !== 0) {\n                        var currentCell = this.grid[i][j];\n                        var nextCell = this.grid[i - 1][j];\n                        if (currentCell === nextCell) {\n                            this.grid[i][j] *= 2;\n                            this.grid[i - 1][j] = 0;\n                            this.score += this.grid[i][j];\n                        }\n                    }\n                }\n                this.updateGrid();\n            }\n        },\n        {\n            key: \"mergeUp\",\n            value: function mergeUp() {\n                for(var i = 0; i < this.grid.length - 1; i++){\n                    for(var j = 0; j < this.grid[i].length; j++)if (this.grid[i][j] !== 0) {\n                        var currentCell = this.grid[i][j];\n                        var nextCell = this.grid[i + 1][j];\n                        if (currentCell === nextCell) {\n                            this.grid[i][j] *= 2;\n                            this.grid[i + 1][j] = 0;\n                            this.score += this.grid[i][j];\n                        }\n                    }\n                }\n                this.updateGrid();\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                for(var j = 0; j < this.grid[0].length; j++)for(var i = 1; i < this.grid.length; i++){\n                    if (this.grid[i][j] !== 0) for(var k = i; k > 0; k--){\n                        if (this.grid[k - 1][j] === 0) {\n                            this.grid[k - 1][j] = this.grid[k][j];\n                            this.grid[k][j] = 0;\n                        } else break;\n                    }\n                }\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                for(var j = 0; j < this.grid[0].length; j++)for(var i = this.grid.length - 2; i >= 0; i--){\n                    if (this.grid[i][j] !== 0) for(var k = i; k < this.grid.length - 1; k++){\n                        if (this.grid[k + 1][j] === 0) {\n                            this.grid[k + 1][j] = this.grid[k][j];\n                            this.grid[k][j] = 0;\n                        } else break;\n                    }\n                }\n            }\n        },\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                for(var i = 0; i < this.grid.length; i++)for(var j = 1; j < this.grid.length; j++){\n                    if (this.grid[i][j] !== 0) for(var k = j; k > 0; k--){\n                        if (this.grid[i][k - 1] === 0) {\n                            this.grid[i][k - 1] = this.grid[i][k];\n                            this.grid[i][k] = 0;\n                        } else break;\n                    }\n                }\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                for(var i = 0; i < this.grid.length; i++)for(var j = this.grid.length - 2; j >= 0; j--){\n                    if (this.grid[i][j] !== 0) for(var k = j; k < this.grid.length - 1; k++){\n                        if (this.grid[i][k + 1] === 0) {\n                            this.grid[i][k + 1] = this.grid[i][k];\n                            this.grid[i][k] = 0;\n                        } else break;\n                    }\n                }\n            }\n        },\n        {\n            key: \"checkGameStatus\",\n            value: function checkGameStatus() {\n                if (this.grid.flat().includes(2048)) {\n                    var winMessage = document.querySelector(\".message-win\");\n                    this.hideMessage();\n                    winMessage.classList.remove(\"hidden\");\n                } else {\n                    var movesAvailable = this.areMovesAvailable();\n                    if (!movesAvailable) {\n                        var loseMessage = document.querySelector(\".message-lose\");\n                        this.hideMessage();\n                        loseMessage.classList.remove(\"hidden\");\n                    }\n                }\n            }\n        },\n        {\n            key: \"areMovesAvailable\",\n            value: function areMovesAvailable() {\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    for(var _iterator = this.grid[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var row = _step.value;\n                        if (row.includes(0)) return true;\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n                for(var i = 0; i < this.grid.length; i++)for(var j = 0; j < this.grid[i].length - 1; j++){\n                    var horizontalMerge = this.grid[i][j] === this.grid[i][j + 1];\n                    var verticalMerge = this.grid[j][i] === this.grid[j + 1][i];\n                    if (horizontalMerge || verticalMerge) return true;\n                }\n                return false;\n            }\n        },\n        {\n            key: \"hideMessage\",\n            value: function hideMessage() {\n                var winMessage = document.querySelector(\".message-win\");\n                var startMessage = document.querySelector(\".message-start\");\n                var loseMessage = document.querySelector(\".message-lose\");\n                var arrMessages = [\n                    winMessage,\n                    startMessage,\n                    loseMessage\n                ];\n                for(var i = 0; i < arrMessages.length; i++)if (!arrMessages[i].classList.contains(\"hidden\")) arrMessages[i].classList.add(\"hidden\");\n            }\n        }\n    ]);\n    return Game;\n}();\nvar startButton = document.getElementById(\"button-start\");\nvar game2048;\nstartButton.addEventListener(\"click\", function() {\n    game2048 = new Game();\n    game2048.hideMessage();\n    startButton.classList.remove(\"start\");\n    startButton.classList.add(\"restart\");\n    startButton.innerText = \"Restart\";\n});\n// eslint-disable-next-line no-shadow\ndocument.addEventListener(\"keydown\", function(event) {\n    switch(true){\n        case event.key === \"ArrowUp\":\n            game2048.action(\"up\");\n            break;\n        case event.key === \"ArrowDown\":\n            game2048.action(\"down\");\n            break;\n        case event.key === \"ArrowLeft\":\n            game2048.action(\"left\");\n            break;\n        case event.key === \"ArrowRight\":\n            game2048.action(\"right\");\n            break;\n    }\n});\nfunction getRandomPosition() {\n    return Math.floor(Math.random() * 15) + 0;\n}\nfunction getRandomNumber() {\n    var randomNumber = Math.floor(Math.random() * 10) + 1;\n    return randomNumber <= 9 ? 2 : 4;\n}\n\n//# sourceMappingURL=index.ee7fc0c6.js.map\n","'use strict';\n\nclass Game {\n  constructor() {\n    this.grid = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];\n    this.score = 0;\n\n    this.updateScore();\n    this.addNumber();\n    this.addNumber();\n  }\n\n  addNumber() {\n    let randomPosition;\n    let positionNumberArr;\n    let newNumber;\n    let emptyCells = 0;\n    const lastCell = [];\n\n    for (let i = 0; i < this.grid.length; i++) {\n      for (let j = 0; j < this.grid[i].length; j++) {\n        if (this.grid[i][j] === 0) {\n          emptyCells++;\n          lastCell[0] = [i, j];\n        }\n      }\n    }\n\n    if (emptyCells > 1) {\n      do {\n        randomPosition = getRandomPosition();\n        positionNumberArr = Math.floor(randomPosition / 4);\n        newNumber = getRandomNumber();\n      } while (this.grid[positionNumberArr][randomPosition % 4] !== 0);\n\n      this.grid[positionNumberArr][randomPosition % 4] = newNumber;\n\n      this.updateGrid();\n    }\n\n    if (emptyCells === 1) {\n      this.grid[lastCell[0][0]][lastCell[0][1]] = getRandomNumber();\n      this.updateGrid();\n    } else {\n      this.checkGameStatus();\n    }\n  }\n\n  copyGrid() {\n    return this.grid.map(row => row.slice());\n  }\n\n  isGridEqual(grid1, grid2) {\n    for (let i = 0; i < grid1.length; i++) {\n      for (let j = 0; j < grid1[i].length; j++) {\n        if (grid1[i][j] !== grid2[i][j]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  action(direction) {\n    const originalGrid = this.copyGrid();\n\n    this.move(direction);\n    this.mergeNumber(direction);\n\n    const gridChanged = !this.isGridEqual(originalGrid, this.grid);\n\n    this.updateScore();\n    this.move(direction);\n\n    if (gridChanged) {\n      this.addNumber();\n    }\n    this.checkGameStatus();\n  }\n\n  move(direction) {\n    switch (true) {\n      case direction === 'up':\n        this.moveUp();\n        break;\n\n      case direction === 'down':\n        this.moveDown();\n        break;\n\n      case direction === 'left':\n        this.moveLeft();\n        break;\n\n      case direction === 'right':\n        this.moveRight();\n        break;\n    }\n  }\n\n  mergeNumber(direction) {\n    switch (true) {\n      case direction === 'up':\n        this.mergeUp();\n        break;\n\n      case direction === 'down':\n        this.mergeDown();\n        break;\n\n      case direction === 'left':\n        this.mergeLeft();\n        break;\n\n      case direction === 'right':\n        this.mergeRight();\n        break;\n    }\n  }\n\n  updateGrid() {\n    for (let i = 0; i < this.grid.length; i++) {\n      for (let j = 0; j < this.grid[i].length; j++) {\n        const cellValue = this.grid[i][j];\n        const cellId = `field-cell-${i * 4 + j}`;\n        const cellElement = document.getElementById(cellId);\n\n        cellElement.className = 'field-cell';\n\n        if (cellValue !== 0) {\n          cellElement.classList.add(`field-cell--${cellValue}`);\n          cellElement.innerText = cellValue;\n        } else {\n          cellElement.innerText = '';\n        }\n      }\n    }\n  }\n\n  updateScore() {\n    const element = document.getElementById('game-score');\n\n    element.innerText = this.score;\n  }\n\n  mergeRight() {\n    for (let i = 0; i < this.grid.length; i++) {\n      for (let j = this.grid[i].length - 1; j >= 0; j--) {\n        if (this.grid[i][j] !== 0) {\n          const currentCell = this.grid[i][j];\n          const nextCell = this.grid[i][j - 1];\n\n          if (currentCell === nextCell) {\n            this.grid[i][j] *= 2;\n            this.grid[i][j - 1] = 0;\n            this.score += this.grid[i][j];\n          }\n        }\n      }\n    }\n    this.updateGrid();\n  }\n\n  mergeLeft() {\n    for (let i = 0; i < this.grid.length; i++) {\n      for (let j = 0; j <= this.grid[i].length - 1; j++) {\n        if (this.grid[i][j] !== 0) {\n          const currentCell = this.grid[i][j];\n          const nextCell = this.grid[i][j + 1];\n\n          if (currentCell === nextCell) {\n            this.grid[i][j] *= 2;\n            this.grid[i][j + 1] = 0;\n            this.score += this.grid[i][j];\n          }\n        }\n      }\n    }\n    this.updateGrid();\n  }\n\n  mergeDown() {\n    for (let i = this.grid.length - 1; i >= 1; i--) {\n      for (let j = 0; j < this.grid[i].length; j++) {\n        if (this.grid[i][j] !== 0) {\n          const currentCell = this.grid[i][j];\n          const nextCell = this.grid[i - 1][j];\n\n          if (currentCell === nextCell) {\n            this.grid[i][j] *= 2;\n            this.grid[i - 1][j] = 0;\n            this.score += this.grid[i][j];\n          }\n        }\n      }\n    }\n    this.updateGrid();\n  }\n\n  mergeUp() {\n    for (let i = 0; i < this.grid.length - 1; i++) {\n      for (let j = 0; j < this.grid[i].length; j++) {\n        if (this.grid[i][j] !== 0) {\n          const currentCell = this.grid[i][j];\n          const nextCell = this.grid[i + 1][j];\n\n          if (currentCell === nextCell) {\n            this.grid[i][j] *= 2;\n            this.grid[i + 1][j] = 0;\n            this.score += this.grid[i][j];\n          }\n        }\n      }\n    }\n    this.updateGrid();\n  }\n\n  moveUp() {\n    for (let j = 0; j < this.grid[0].length; j++) {\n      for (let i = 1; i < this.grid.length; i++) {\n        if (this.grid[i][j] !== 0) {\n          for (let k = i; k > 0; k--) {\n            if (this.grid[k - 1][j] === 0) {\n              this.grid[k - 1][j] = this.grid[k][j];\n              this.grid[k][j] = 0;\n            } else {\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  moveDown() {\n    for (let j = 0; j < this.grid[0].length; j++) {\n      for (let i = this.grid.length - 2; i >= 0; i--) {\n        if (this.grid[i][j] !== 0) {\n          for (let k = i; k < this.grid.length - 1; k++) {\n            if (this.grid[k + 1][j] === 0) {\n              this.grid[k + 1][j] = this.grid[k][j];\n              this.grid[k][j] = 0;\n            } else {\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  moveLeft() {\n    for (let i = 0; i < this.grid.length; i++) {\n      for (let j = 1; j < this.grid.length; j++) {\n        if (this.grid[i][j] !== 0) {\n          for (let k = j; k > 0; k--) {\n            if (this.grid[i][k - 1] === 0) {\n              this.grid[i][k - 1] = this.grid[i][k];\n              this.grid[i][k] = 0;\n            } else {\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  moveRight() {\n    for (let i = 0; i < this.grid.length; i++) {\n      for (let j = this.grid.length - 2; j >= 0; j--) {\n        if (this.grid[i][j] !== 0) {\n          for (let k = j; k < this.grid.length - 1; k++) {\n            if (this.grid[i][k + 1] === 0) {\n              this.grid[i][k + 1] = this.grid[i][k];\n              this.grid[i][k] = 0;\n            } else {\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  checkGameStatus() {\n    if (this.grid.flat().includes(2048)) {\n      const winMessage = document.querySelector('.message-win');\n\n      this.hideMessage();\n\n      winMessage.classList.remove('hidden');\n    } else {\n      const movesAvailable = this.areMovesAvailable();\n\n      if (!movesAvailable) {\n        const loseMessage = document.querySelector('.message-lose');\n\n        this.hideMessage();\n\n        loseMessage.classList.remove('hidden');\n      }\n    }\n  }\n\n  areMovesAvailable() {\n    for (const row of this.grid) {\n      if (row.includes(0)) {\n        return true;\n      }\n    }\n\n    for (let i = 0; i < this.grid.length; i++) {\n      for (let j = 0; j < this.grid[i].length - 1; j++) {\n        const horizontalMerge = this.grid[i][j] === this.grid[i][j + 1];\n        const verticalMerge = this.grid[j][i] === this.grid[j + 1][i];\n\n        if (horizontalMerge || verticalMerge) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  hideMessage() {\n    const winMessage = document.querySelector('.message-win');\n    const startMessage = document.querySelector('.message-start');\n    const loseMessage = document.querySelector('.message-lose');\n\n    const arrMessages = [winMessage, startMessage, loseMessage];\n\n    for (let i = 0; i < arrMessages.length; i++) {\n      if (!arrMessages[i].classList.contains('hidden')) {\n        arrMessages[i].classList.add('hidden');\n      }\n    }\n  }\n}\n\nconst startButton = document.getElementById('button-start');\n\nlet game2048;\n\nstartButton.addEventListener('click', function() {\n  game2048 = new Game();\n  game2048.hideMessage();\n\n  startButton.classList.remove('start');\n  startButton.classList.add('restart');\n  startButton.innerText = 'Restart';\n});\n\n// eslint-disable-next-line no-shadow\ndocument.addEventListener('keydown', event => {\n  switch (true) {\n    case event.key === 'ArrowUp':\n      game2048.action('up');\n      break;\n\n    case event.key === 'ArrowDown':\n      game2048.action('down');\n      break;\n\n    case event.key === 'ArrowLeft':\n      game2048.action('left');\n      break;\n\n    case event.key === 'ArrowRight':\n      game2048.action('right');\n      break;\n  }\n});\n\nfunction getRandomPosition() {\n  return Math.floor(Math.random() * 15) + 0;\n}\n\nfunction getRandomNumber() {\n  const randomNumber = Math.floor(Math.random() * 10) + 1;\n\n  return (randomNumber <= 9) ? 2 : 4;\n}\n"],"names":["game2048","Game","protoProps","_class_call_check","instance","Constructor","TypeError","grid","score","updateScore","addNumber","key","value","randomPosition","positionNumberArr","newNumber","emptyCells","lastCell","i","length","j","Math","floor","random","getRandomNumber","updateGrid","checkGameStatus","map","row","slice","grid1","grid2","direction","originalGrid","copyGrid","move","mergeNumber","gridChanged","isGridEqual","moveUp","moveDown","moveLeft","moveRight","mergeUp","mergeDown","mergeLeft","mergeRight","cellValue","cellId","concat","cellElement","document","getElementById","className","classList","add","innerText","element","currentCell","k","flat","includes","winMessage","querySelector","hideMessage","remove","areMovesAvailable","loseMessage","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","err","return","horizontalMerge","verticalMerge","arrMessages","contains","_defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","prototype","startButton","randomNumber","addEventListener","event","action"],"version":3,"file":"index.ee7fc0c6.js.map"}